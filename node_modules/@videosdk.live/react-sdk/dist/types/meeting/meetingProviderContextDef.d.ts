export const MeetingProviderContex: any;
export function useMeeting({ onParticipantJoined, onParticipantLeft, onSpeakerChanged, onPresenterChanged, onMainParticipantChanged, onEntryRequested, onEntryResponded, onRecordingStarted, onRecordingStopped, onChatMessage, onMeetingJoined, onMeetingLeft, onLiveStreamStarted, onLiveStreamStopped, onVideoStateChanged, onVideoSeeked, onWebcamRequested, onMicRequested, onPinStateChanged, onConnectionOpen, onConnetionClose, onSwitchMeeting, onError, onHlsStarted, onHlsStopped, onHlsStateChanged, onRecordingStateChanged, onLivestreamStateChanged, onMeetingStateChanged, onParticipantModeChanged }?: {
    onParticipantJoined?: () => void;
    onParticipantLeft?: () => void;
    onSpeakerChanged?: () => void;
    onPresenterChanged?: () => void;
    onMainParticipantChanged?: () => void;
    onEntryRequested?: () => void;
    onEntryResponded?: () => void;
    onRecordingStarted?: () => void;
    onRecordingStopped?: () => void;
    onChatMessage?: () => void;
    onMeetingJoined?: () => void;
    onMeetingLeft?: () => void;
    onLiveStreamStarted?: () => void;
    onLiveStreamStopped?: () => void;
    onVideoStateChanged?: () => void;
    onVideoSeeked?: () => void;
    onWebcamRequested?: () => void;
    onMicRequested?: () => void;
    onPinStateChanged?: () => void;
    onConnectionOpen?: () => void;
    onConnetionClose?: () => void;
    onSwitchMeeting?: () => void;
    onError?: () => void;
    onHlsStarted?: () => void;
    onHlsStopped?: () => void;
    onHlsStateChanged?: () => void;
    onRecordingStateChanged?: () => void;
    onLivestreamStateChanged?: () => void;
    onMeetingStateChanged?: () => void;
}): {
    meetingId: string;
    meeting: Meeting;
    localParticipant: Participant;
    activeSpeakerId: string;
    participants: Map<string, Participant>;
    pinnedParticipants: Map<string, {
        cam: boolean;
        share: boolean;
    }>;
    presenterId: string;
    localMicOn: boolean;
    localWebcamOn: boolean;
    isRecording: boolean;
    isLiveStreaming: boolean;
    localScreenShareOn: boolean;
    connections: Map<string, Connection>;
    join: () => void;
    leave: () => void;
    end: () => void;
    unmuteMic: (customAudioTrack?: MediaStream | undefined) => void;
    muteMic: () => void;
    toggleMic: (customAudioTrack?: MediaStream | undefined) => void;
    enableWebcam: (customVideoTrack?: MediaStream | undefined) => void;
    disableWebcam: () => void;
    toggleWebcam: (customVideoTrack?: MediaStream | undefined) => void;
    enableScreenShare: (customScreenShareTrack?: MediaStream | undefined) => void;
    disableScreenShare: () => void;
    toggleScreenShare: (customScreenShareTrack?: MediaStream | undefined) => void;
    startRecording: (webhookUrl?: string, awsDirPath?: string, config?: {
        layout: {
            type: "GRID" | "SPOTLIGHT" | "SIDEBAR";
            priority: "SPEAKER" | "PIN";
            gridSize: number;
        };
    }) => void;
    stopRecording: () => void;
    startLiveStream: (outputs: Array<{
        url: string;
        streamKey: string;
    }>, config?: {
        layout: {
            type: "GRID" | "SPOTLIGHT" | "SIDEBAR";
            priority: "SPEAKER" | "PIN";
            gridSize: number;
        };
    }) => void;
    stopLiveStream: () => void;
    startHls: (config?: {
        layout: {
            type: "GRID" | "SPOTLIGHT" | "SIDEBAR";
            priority: "SPEAKER" | "PIN";
            gridSize: number;
        };
    }) => void;
    stopHls: () => void;
    getMics: () => Promise<{
        deviceId: string;
        label: string;
    }[]>;
    void: any;
    getWebcams: () => Promise<{
        deviceId: string;
        label: string;
        facingMode: "environment" | "front";
    }[]>;
    changeMic: (object: string | MediaStream) => void;
    changeWebcam: (object: string | MediaStream) => void;
    startVideo: ({ link }: {
        link: string;
    }) => void;
    stopVideo: () => void;
    pauseVideo: ({ currentTime }: {
        currentTime: number;
    }) => void;
    resumeVideo: () => void;
    seekVideo: ({ currentTime }: {
        currentTime: number;
    }) => void;
    connectTo: ({ meetingId, payload }: {
        meetingId: string;
        payload: string;
    }) => void;
};
export function MeetingConsumer({ children, onParticipantJoined, onParticipantLeft, onSpeakerChanged, onPresenterChanged, onMainParticipantChanged, onEntryRequested, onEntryResponded, onRecordingStarted, onRecordingStopped, onChatMessage, onMeetingJoined, onMeetingLeft, onLiveStreamStarted, onLiveStreamStopped, onVideoStateChanged, onVideoSeeked, onWebcamRequested, onMicRequested, onPinStateChanged, onConnectionOpen, onConnetionClose, onSwitchMeeting, onError, onHlsStarted, onHlsStopped, onHlsStateChanged, onRecordingStateChanged, onLivestreamStateChanged, onMeetingStateChanged, onParticipantModeChanged }: {
    children: any;
    onParticipantJoined?: () => void;
    onParticipantLeft?: () => void;
    onSpeakerChanged?: () => void;
    onPresenterChanged?: () => void;
    onMainParticipantChanged?: () => void;
    onEntryRequested?: () => void;
    onEntryResponded?: () => void;
    onRecordingStarted?: () => void;
    onRecordingStopped?: () => void;
    onChatMessage?: () => void;
    onMeetingJoined?: () => void;
    onMeetingLeft?: () => void;
    onLiveStreamStarted?: () => void;
    onLiveStreamStopped?: () => void;
    onVideoStateChanged?: () => void;
    onVideoSeeked?: () => void;
    onWebcamRequested?: () => void;
    onMicRequested?: () => void;
    onPinStateChanged?: () => void;
    onConnectionOpen?: () => void;
    onConnetionClose?: () => void;
    onSwitchMeeting?: () => void;
    onError?: () => void;
    onHlsStarted?: () => void;
    onHlsStopped?: () => void;
    onHlsStateChanged?: () => void;
    onRecordingStateChanged?: () => void;
    onLivestreamStateChanged?: () => void;
    onMeetingStateChanged?: () => void;
    onParticipantModeChanged?: () => void;
}): any;
//# sourceMappingURL=meetingProviderContextDef.d.ts.map