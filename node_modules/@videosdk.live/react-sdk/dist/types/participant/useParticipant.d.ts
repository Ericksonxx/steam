export default useParticipant;
/**
 *
 * @param {string} participantId
 * @param {{
 *  onStreamDisabled?: Function,
 *  onStreamEnabled?: Function,
 *  onMediaStatusChanged?: Function,
 *  onVideoQualityChanged?: Function,
 * }} options
 *
 * @returns {{
 *   displayName: string;
 *   participant: Participant;
 *   webcamStream: Stream;
 *   micStream: Stream;
 *   screenShareStream: Stream;
 *   screenShareAudioStream: Stream;
 *   webcamOn: boolean;
 *   micOn: boolean;
 *   screenShareOn: boolean;
 *   isLocal: boolean;
 *   isActiveSpeaker: boolean;
 *   isMainParticipant: boolean;
 *   pinState: any;
 *   mode: "CONFERENCE" | "VIEWER",
 *   consumeMicStreams: () => void;
 *   consumeWebcamStreams: () => void;
 *   stopConsumingMicStreams: () => void;
 *   stopConsumingWebcamStreams: () => void;
 *   setQuality: (quality: "low" | "med" | 'high') => void;
 *   setViewPort: (width: number, height: number) => void;
 *   enableMic: () => void;
 *   disableMic: () => void;
 *   enableWebcam: () => void;
 *   disableWebcam: () => void;
 *   pin: (data: "SHARE_AND_CAM" | "CAM" | "SHARE") => void;
 *   unpin: (data: "SHARE_AND_CAM" | "CAM" | "SHARE") => void;
 *   switchTo: ({ meetingId, payload, token }: {
 *      meetingId: string;
 *      payload: string;
 *      token: string;
 *   }) => Promise<void>;
 *   getAudioStats: () => Promise<[{
 *   bitrate: number,
 *   rtt: number,
 *   network:String,
 *   codec: String,
 *   jitter: number,
 *   limitation: Object,
 *   totalPackets: number,
 *   packetsLost: number,
 *   concealmentEvents: number,
 *   insertedSamplesForDecelaration: number,
 *   removedSamplesForAccelaration: number,
 *   size:Object
 * }]>;
 * getVideoStats: () => Promise<[{
 *   bitrate: number,
 *   rtt: number,
 *   network:String,
 *   codec: String,
 *   jitter: number,
 *   limitation: Object,
 *   totalPackets: number,
 *   packetsLost: number,
 *   concealmentEvents: number,
 *   insertedSamplesForDecelaration: number,
 *   removedSamplesForAccelaration: number,
 *   size:Object,
 *   currentSpatialLayer: number,
 *   currentTemporalLayer: number,
 *   preferredSpatialLayer: number,
 *   preferredTemporalLayer: number
 * }]>;
 * getShareStats: () => Promise<[{
 *   bitrate: number,
 *   rtt: number,
 *   network:String,
 *   codec: String,
 *   jitter: number,
 *   limitation: Object,
 *   totalPackets: number,
 *   packetsLost: number,
 *   concealmentEvents: number,
 *   insertedSamplesForDecelaration: number,
 *   removedSamplesForAccelaration: number,
 *   size:Object,
 *   currentSpatialLayer: number,
 *   currentTemporalLayer: number,
 *   preferredSpatialLayer: number,
 *   preferredTemporalLayer: number
 * }]>;
 *}}
 *
 */
declare function useParticipant(participantId: string, { onStreamEnabled, onStreamDisabled, onMediaStatusChanged, onVideoQualityChanged }?: {
    onStreamDisabled?: Function;
    onStreamEnabled?: Function;
    onMediaStatusChanged?: Function;
    onVideoQualityChanged?: Function;
}): {
    displayName: string;
    participant: Participant;
    webcamStream: Stream;
    micStream: Stream;
    screenShareStream: Stream;
    screenShareAudioStream: Stream;
    webcamOn: boolean;
    micOn: boolean;
    screenShareOn: boolean;
    isLocal: boolean;
    isActiveSpeaker: boolean;
    isMainParticipant: boolean;
    pinState: any;
    mode: "CONFERENCE" | "VIEWER";
    consumeMicStreams: () => void;
    consumeWebcamStreams: () => void;
    stopConsumingMicStreams: () => void;
    stopConsumingWebcamStreams: () => void;
    setQuality: (quality: "low" | "med" | 'high') => void;
    setViewPort: (width: number, height: number) => void;
    enableMic: () => void;
    disableMic: () => void;
    enableWebcam: () => void;
    disableWebcam: () => void;
    pin: (data: "SHARE_AND_CAM" | "CAM" | "SHARE") => void;
    unpin: (data: "SHARE_AND_CAM" | "CAM" | "SHARE") => void;
    switchTo: ({ meetingId, payload, token }: {
        meetingId: string;
        payload: string;
        token: string;
    }) => Promise<void>;
    getAudioStats: () => Promise<[
        {
            bitrate: number;
            rtt: number;
            network: string;
            codec: string;
            jitter: number;
            limitation: any;
            totalPackets: number;
            packetsLost: number;
            concealmentEvents: number;
            insertedSamplesForDecelaration: number;
            removedSamplesForAccelaration: number;
            size: any;
        }
    ]>;
    getVideoStats: () => Promise<[
        {
            bitrate: number;
            rtt: number;
            network: string;
            codec: string;
            jitter: number;
            limitation: any;
            totalPackets: number;
            packetsLost: number;
            concealmentEvents: number;
            insertedSamplesForDecelaration: number;
            removedSamplesForAccelaration: number;
            size: any;
            currentSpatialLayer: number;
            currentTemporalLayer: number;
            preferredSpatialLayer: number;
            preferredTemporalLayer: number;
        }
    ]>;
    getShareStats: () => Promise<[
        {
            bitrate: number;
            rtt: number;
            network: string;
            codec: string;
            jitter: number;
            limitation: any;
            totalPackets: number;
            packetsLost: number;
            concealmentEvents: number;
            insertedSamplesForDecelaration: number;
            removedSamplesForAccelaration: number;
            size: any;
            currentSpatialLayer: number;
            currentTemporalLayer: number;
            preferredSpatialLayer: number;
            preferredTemporalLayer: number;
        }
    ]>;
};
//# sourceMappingURL=useParticipant.d.ts.map