export default reducers;
declare const reducers: import("redux").Reducer<import("redux").CombinedState<{
    room: {
        state: any;
        url: any;
        activeSpeakerId: any;
        statsPeerId: any;
        faceDetection: boolean;
    } | {
        faceDetection: any;
        url: any;
        state: string;
        activeSpeakerId: any;
        statsPeerId: any;
    };
    me: {
        id: any;
        displayName: any;
        displayNameSet: any;
        device: any;
        canSendMic: boolean;
        canSendWebcam: boolean;
        canChangeWebcam: boolean;
        webcamInProgress: boolean;
        shareInProgress: boolean;
        audioOnly: boolean;
        audioOnlyInProgress: boolean;
        audioMuted: boolean;
        restartIceInProgress: boolean;
    } | {
        canSendMic: any;
        canSendWebcam: any;
        id: any;
        displayName: any;
        displayNameSet: boolean;
        device: any;
        canChangeWebcam: boolean;
        webcamInProgress: boolean;
        shareInProgress: boolean;
        audioOnly: boolean;
        audioOnlyInProgress: boolean;
        audioMuted: boolean;
        restartIceInProgress: boolean;
    } | {
        canChangeWebcam: any;
        id: any;
        displayName: any;
        displayNameSet: boolean;
        device: any;
        canSendMic: boolean;
        canSendWebcam: boolean;
        webcamInProgress: boolean;
        shareInProgress: boolean;
        audioOnly: boolean;
        audioOnlyInProgress: boolean;
        audioMuted: boolean;
        restartIceInProgress: boolean;
    } | {
        webcamInProgress: any;
        id: any;
        displayName: any;
        displayNameSet: boolean;
        device: any;
        canSendMic: boolean;
        canSendWebcam: boolean;
        canChangeWebcam: boolean;
        shareInProgress: boolean;
        audioOnly: boolean;
        audioOnlyInProgress: boolean;
        audioMuted: boolean;
        restartIceInProgress: boolean;
    } | {
        shareInProgress: any;
        id: any;
        displayName: any;
        displayNameSet: boolean;
        device: any;
        canSendMic: boolean;
        canSendWebcam: boolean;
        canChangeWebcam: boolean;
        webcamInProgress: boolean;
        audioOnly: boolean;
        audioOnlyInProgress: boolean;
        audioMuted: boolean;
        restartIceInProgress: boolean;
    } | {
        audioOnly: any;
        id: any;
        displayName: any;
        displayNameSet: boolean;
        device: any;
        canSendMic: boolean;
        canSendWebcam: boolean;
        canChangeWebcam: boolean;
        webcamInProgress: boolean;
        shareInProgress: boolean;
        audioOnlyInProgress: boolean;
        audioMuted: boolean;
        restartIceInProgress: boolean;
    } | {
        audioOnlyInProgress: any;
        id: any;
        displayName: any;
        displayNameSet: boolean;
        device: any;
        canSendMic: boolean;
        canSendWebcam: boolean;
        canChangeWebcam: boolean;
        webcamInProgress: boolean;
        shareInProgress: boolean;
        audioOnly: boolean;
        audioMuted: boolean;
        restartIceInProgress: boolean;
    } | {
        audioMuted: any;
        id: any;
        displayName: any;
        displayNameSet: boolean;
        device: any;
        canSendMic: boolean;
        canSendWebcam: boolean;
        canChangeWebcam: boolean;
        webcamInProgress: boolean;
        shareInProgress: boolean;
        audioOnly: boolean;
        audioOnlyInProgress: boolean;
        restartIceInProgress: boolean;
    } | {
        restartIceInProgress: any;
        id: any;
        displayName: any;
        displayNameSet: boolean;
        device: any;
        canSendMic: boolean;
        canSendWebcam: boolean;
        canChangeWebcam: boolean;
        webcamInProgress: boolean;
        shareInProgress: boolean;
        audioOnly: boolean;
        audioOnlyInProgress: boolean;
        audioMuted: boolean;
    };
    producers: {};
    dataProducers: {};
    peers: {};
    consumers: {};
    dataConsumers: {};
    notifications: any[];
}>, import("redux").AnyAction>;
//# sourceMappingURL=index.d.ts.map